<?php

/**
 * @file
 * The module file.
 */

function cocoon_media_management_menu() {
  $items['admin/config/media/cocoon_settings'] = array(
    'title' => 'Cocoon Media Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cocoon_media_management_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
     'file' => 'cocoon_media_management.admin.inc',
  );

  $items['file/add/cocoon_media_add'] = array(
    'title' => 'Cocoon Media',
    'description' => 'Browse Cocoon Media to add to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cocoon_media_management_external'),
    'access arguments' => array('access media browser'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'file_entity.pages.inc',
    'file path' => drupal_get_path('module', 'file_entity'),
  );

  $items['cocoon_media/search_tag'] = array(
    'title' => 'Cocoon Media',
    'page callback' => 'cocoon_media_autocomplete',
    'access arguments' => array('access media browser'),
    'type' => MENU_CALLBACK,
  );

   return $items;
 }
 
function cocoon_media_management_get_setting($setting = '', $default_to = '') {
  $cocoon_settings =variable_get('cocoon_media_settings', array());
  if(empty($setting)) {
    $return_value = $cocoon_settings;
  }
  else {
    $return_value = !empty($cocoon_settings[$setting]) ? $cocoon_settings[$setting] : $default_to;
  }
  return $return_value;
}

function cocoon_media_management_create_cmm_controller() {
  $cocoon_controller = &drupal_static(__FUNCTION__);
  if (!isset($cocoon_controller)) {
    if ($cache = cache_get('cocoon_controller')) {
      $cocoon_controller = $cache->data;
    }
    else {
      $domain = cocoon_media_management_get_setting('cocoon_domain');
      $username = cocoon_media_management_get_setting('cocoon_username');
      $api_key = cocoon_media_management_get_setting('cocoon_api_key');
      $cocoon_controller = new CocoonController($domain, $username, $api_key);
      cache_set('cocoon_controller', $cocoon_controller, 'cache');
    }
  }
  return $cocoon_controller;
}

function cocoon_media_get_sets_cached() {
  $cached_sets = &drupal_static(__FUNCTION__);
  if (!isset($cached_sets)) {
    if ($cache = cache_get('cocoon_sets')) {
      $cached_sets = $cache->data;
    }
    else {
      $cocoon_controller = cocoon_media_management_create_cmm_controller();
      $cached_sets = $cocoon_controller->getSets();
      cache_set('cocoon_sets', $cached_sets, 'cache', time() + 120);
    }
  }
  return $cached_sets;
}

function cocoon_media_get_tags_cached() {
  $cached_tags = &drupal_static(__FUNCTION__);
  if (!isset($cached_tags)) {
    if ($cache = cache_get('cocoon_tags')) {
      $cached_tags = $cache->data;
    }
    else {
      $cocoon_controller = cocoon_media_management_create_cmm_controller();
      $cached_tags = $cocoon_controller->getTags();
      cache_set('cocoon_tags', $cached_tags, 'cache', time() + 120);
    }
  }
  return $cached_tags;
}

function cocoon_media_get_matching_tags($string = '', $only_name = true) {
  $matches = array();  
  if ($string) {
    $tags_list = cocoon_media_get_tags_cached();
    foreach ($tags_list as $tag) {
      $string_found = strpos($tag['name'], $string);
      if($string_found !== false){
        if($only_name) {
          $matches[$tag['name']] = check_plain($tag['name']);
        }
        else {
          $matches[$tag['id']] = check_plain($tag['name']);
        }
      }
    }
  }

  return $matches;
}


/**
 * Implements hook_theme().
 */
function cocoon_media_management_theme($existing, $type, $theme, $path) {
  return array(
    'cocoon_media_list' => array(
      'variables' => array(
        'images' => NULL,
      ),
      'template' => 'cocoon-media-list',
      'path' => drupal_get_path('module', 'cocoon_media') . '/templates',
    ),
  );
}
  
/**
 * Implements hook_forms().
 */
function cocoon_media_management_forms($form_id, $args) {
  $forms = array();

  // Create a copy of the upload wizard form for internet media.
  if ($form_id == 'cocoon_media_management_external') {
    drupal_add_css(drupal_get_path('module', 'cocoon_media_management') . '/css/tablegrid-selet.css');
    $forms[$form_id] = array(
      'callback' => 'file_entity_add_upload_multiple',
    );
  }

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cocoon_media_management_form_file_entity_add_upload_multiple_alter(&$form, &$form_state, $form_id) {
  $step = $form['#step'];
  if ($form_id == 'cocoon_media_management_external' && $step == 1) {
    $domain = cocoon_media_management_get_setting('cocoon_domain');
    $username = cocoon_media_management_get_setting('cocoon_username');
    $api_key = cocoon_media_management_get_setting('cocoon_api_key');
    // Add the follwing form elements only if the module API is configured.
    if(!empty($domain) && !empty($username) && !empty($api_key)) {
      $form['upload'] = array(
        '#upload_location' => ''
      );
      $sets = cocoon_media_get_sets_cached();
      $radio_sets = [];
      $total_count = 0;
      foreach($sets as $set) {
        $radio_sets[$set['id']] = $set['title'] . ' (' . $set['file_count'] . ')';
        $total_count += $set['file_count'];
      }
      $radio_sets['all'] = 'All'. ' (' . $total_count . ')';

      $form['cocoon_media_browser'] = array(
        '#type' => 'fieldset',
        '#title' => t('Cocoon Media Management Browse'),
        '#collapsible' => FALSE,
        '#tree' => TRUE,
      );
      // CMM Label
      $form['cocoon_media_browser']['othertable'] = array(
        '#type' => 'tablegridselect',
      );
      // CMM Label
      $form['cocoon_media_browser']['description'] = array(
        '#markup' => t("Browse and add Cocoon Media to your library.") . '<br/>',
      );
      $form['cocoon_media_browser']['sets'] = array(
        '#type' => 'radios',
        '#title' => t('Select a set'),
        '#default_value' => 'all',
        '#options' => $radio_sets,
        '#ajax' => array(
          'callback' => 'ajaxCallbackGetFilesBySet',
          'wrapper' => 'images-table',
          'effect' => 'fade',
        ),
      );
      $form['cocoon_media_browser']['tag_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Search by tag'),
        '#default_value' => '',
        '#autocomplete_path' => 'cocoon_media/search_tag',
        '#ajax' => array(
          'callback' => 'ajaxCallbackGetFilesBySet',
          'wrapper' => 'images-table',
          'effect' => 'fade',
          'keypress' => true,
        ),
        '#size' => '20',
        '#maxlength' => '60',
      );

      $set = 'all';
      $tag_id = null;
      if(!empty($form_state['values'])) {
        $values = $form_state['values'];
        $set = $values['cocoon_media_browser']['sets'];
        $tag_id = $values['cocoon_media_browser']['tag_name'];
      }
    
      $form['cocoon_media_browser']['pager'] = array(
        '#theme' => 'pager',
      );
      $form['cocoon_media_browser']['images_table'] = buildTableSelect('images-table', $set, $tag_id);
    }
    else {
      // CMM Label
      $form['cocoon_media_browser']['api_not_configured'] = array(
        '#markup' => t('Please first add the configuration parameters here: <a href="@url">settings</a> page', array(
          '@url' => url('admin/config/media/cocoon_settings'),
        )),
      );
    }
  
    // Create an array to hold potential Internet media providers.
    $providers = array();

    // Determine if there are any visible providers.
    foreach (media_internet_get_providers() as $key => $provider) {
      if (empty($provider['hidden']) || $provider['hidden'] != TRUE) {
        $providers[] = check_plain($provider['title']);
      }
    }

    $form['#validators'] = array();

    if (!empty($options['types'])) {
      $form['#validators']['media_file_validate_types'] = array($options['types']);
    }

    // Add validation and submission handlers to the form and ensure that they
    // run first.
    array_unshift($form['#validate'], 'cocoon_media_add_validate');
    // array_unshift($form['#submit'], 'cocoon_media_add_submit');
    $form['#submit']= array(
      'cocoon_media_add_submit'
    );
  }
  return $form;
}

function retrieveRemoteFile($url, $local_url = '', $to_temp = false) {
  // Check the cache and download the file if needed.
  $parsed_url = drupal_parse_url($url);
  $cocoon_dir = 'cocoon_media_files';
  $cocon_media_directory = 'public://'. $cocoon_dir;
  $is_dir_created = file_prepare_directory($cocon_media_directory, FILE_CREATE_DIRECTORY);
  if(empty($local_url)) {
    // $cocon_media_directory = $to_temp ? 'temporary://' : 'public://';
    $local_url = $cocon_media_directory . '/' . drupal_basename($parsed_url['path']);
  }
  $retrieved_file = system_retrieve_file($url, $local_url, !$to_temp, FILE_EXISTS_REPLACE);
  return $retrieved_file;
}

function remoteThumbToLocal($image_info, $prefix, $is_temp = false) {
  $local_path = '';
  $filename = $prefix . $image_info['filename'] . '.' . $image_info['extension'];
  if(!empty($filename)) {
    $local_path = 'public://cocoon_media_files/' . $filename;
    if(!file_exists($local_path)) {
      $cocoonController = cocoon_media_management_create_cmm_controller();
      $thumb_info = $cocoonController->getThumbInfo($image_info['id']);
      if(!empty($thumb_info['web'])) {
        $local_file = retrieveRemoteFile($thumb_info['web'], $local_path, $is_temp);
      }
      else {
        $local_path = '';
      }
    }
  }
  return $local_path;
}

function buildOptionsElements($set_id, $tag_name = null) {
  // $options = &drupal_static(__FUNCTION__);
  // if (!isset($options)) {
  //   if ($cache = cache_get('cocoon_table_options')) {
  //     $options = $cache->data;
  //   }
  //   else {
      $image_list = [];
      $options = [];
      if(!empty($set_id)) {
        $cocoonController = cocoon_media_management_create_cmm_controller();
        if($tag_name !== null) {
          $matching_tags = cocoon_media_get_matching_tags($tag_name, false);
          // dpm($matching_tags);
          foreach($matching_tags as $tag_id => $tag){
            $image_list = array_merge($image_list, $cocoonController->getFilesByTag($tag_id));
          }
          dpm($image_list);
        }
        if($set_id !== 'all')
        {
          $image_list = $cocoonController->getFilesBySet($set_id);
        }
        else {
          foreach(cocoon_media_get_sets_cached() as $set) {
            $image_list = array_merge($image_list, $cocoonController->getFilesBySet($set['id']));
          }
        }
      }
      foreach($image_list as $idx => $image_info) {
        $thumb_url = '/' . drupal_get_path('module', 'cocoon_media_management')
        . '/images/generic.png';
        $thumb = remoteThumbToLocal($image_info, 'thumb_', true);
        if(!empty($thumb)) {
          $thumb_url = file_create_url($thumb);
        }
        $elm = [
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
        ];
        $elm['id'] = [
          '#type' => 'hidden',
          '#value' => $image_info['id'],
        ];
        $elm['thumb'] = [
          '#markup' => "<div class='media-thumb' style='background-image:url($thumb_url)'></div>",
        ];
        $elm['title'] = [
          '#prefix' => '<label class="media-title">',
          '#suffix' => '</label>',
          '#markup' => $image_info['title'],
          '#attributes' => ['class' => 'media-title'],
        ];
        $elm['file_details'] = [
          '#markup' => '<p><b>Extension: </b>'
                      . $image_info['extension']
                      . '<br/><b>Size: </b>'
                      . round($image_info['size']/1024, 2)
                      . 'KB</p>',
        ];
    
        $options[$image_info['id']] = [
          'media_item' => drupal_render($elm),
        ];
      }
  //     // Setting an expiry time on this cache, as options may change.
  //     cache_set('cocoon_table_options', $options, 'cache', time() + 120);
  //   }
  // }
  
  return $options;
}

function buildTableSelect($class_id, $set_id, $tag_name = null) {
  $header = [
      'media_item' => t('Media File'),
  ];
  
  $options = buildOptionsElements($set_id, $tag_name);
  $paging_size = cocoon_media_management_get_setting('paging_size', 20);
  $current_page = pager_default_initialize(count($options), $paging_size);
  $chunks = array_chunk($options, $paging_size, true);
  $table = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $chunks[$current_page],
    '#empty' => t('No media found'),
    '#multiple' => TRUE,
    '#attributes' => array('id' => $class_id),
    '#cache' => array(
      'max-age' => 60 * 60 * 24, // Cached for one day.
    ),
    '#attached' => array(
      'library' => array('cocoon_media_management/tablegrid-selet')
    ),
    '#pre_render' => array(),
  );
  
  array_unshift($table['#pre_render'], 'cocoon_media_add_pager');
  return $table;
}

function cocoon_media_add_pager($element) {
  return $element;
}

function ajaxCallbackGetFilesBySet(&$form, &$form_state) {
  return $form['cocoon_media_browser']['images_table'];
}

/**
 * Upload a file from a URL.
 *
 * This will copy a file from a remote location and store it locally.
 *
 * @see media_parse_to_uri()
 * @see media_parse_to_file()
 */
function cocoon_media_add_submit($form, &$form_state) {
  $selected_images = $form_state['values']['cocoon_media_browser']['images_table'];
  $files = '';
  foreach($selected_images as $selected_image_id) {
    if($selected_image_id) {
      $cocoonController = cocoon_media_management_create_cmm_controller();
      $file_info = $cocoonController->getThumbInfo($selected_image_id);
      $url = $file_info['path'];  
      $files .= $file_info['name'] . '; ';

      try {
        // Save the remote file
        $provider = media_internet_get_provider($url);
        // Providers decide if they need to save locally or somewhere else.
        // This method returns a file object
        $file = $provider->save();
      }
      catch (Exception $e) {
        form_set_error('embed_code', $e->getMessage());
        return;
      }

      if (!$file->fid) {
        form_set_error('embed_code', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $embed_code)));
        return;
      }
      else {
        $form_state['storage']['upload'] = $file->fid;
      }
      // Redirect to the file edit page.
      if (file_entity_access('update', $file) && module_exists('media_bulk_upload')) {
        $destination = array();
        if (isset($_GET['destination'])) {
          $destination = drupal_get_destination();
          unset($_GET['destination']);
        }
        elseif (user_access('administer files')) {
          $destination = array('destination' => 'admin/content/file');
        }
        $form_state['redirect'] = array('admin/content/file/edit-multiple/' . implode(' ', array_keys($form_state['files'])), array('query' => $destination));
      }
      else {
        $form_state['redirect'] = user_access('administer files') ? 'admin/content/file' : '<front>';
      }
    }
  }
  drupal_set_message(t('The following file where added to the file library: ') . $files);
}


/**
 * Allow stream wrappers to have their chance at validation.
 *
 * Any module that implements hook_media_parse will have an
 * opportunity to validate this.
 *
 * @see media_parse_to_uri()
 */
function cocoon_media_add_validate($form, &$form_state) {
  $selected_images = $form_state['values']['cocoon_media_browser']['images_table'];
  $filenames = '';
  foreach($selected_images as $selected_image_id) {
    if($selected_image_id) {
      $cocoonController = cocoon_media_management_create_cmm_controller();
      $file_info = $cocoonController->getThumbInfo($selected_image_id);
      $url = $file_info['path'];
      $embed_code = $url;
      $form_state['values']['embed_code'] = $embed_code;

      // See @file_entity_add_upload_submit
      // Needed for skipping fields if is enabled and if Web tab is active.
      $form_state['triggering_element']['#id'] = 'edit-next';

      if (!empty($embed_code)) {
        try {
          $provider = media_internet_get_provider($embed_code);
          $provider->validate();
        }
        catch (MediaInternetNoHandlerException $e) {
          form_set_error('embed_code', $e->getMessage());
          return;
        }
        catch (MediaInternetValidationException $e) {
          form_set_error('embed_code', $e->getMessage());
          return;
        }

        $validators = $form['#validators'];
        $file = $provider->getFileObject();

        if ($validators) {
          try {
            $file = $provider->getFileObject();
          }
          catch (Exception $e) {
            form_set_error('embed_code', $e->getMessage());
            return;
          }

          $errors = file_validate($file, $validators);

          if (!empty($errors)) {
            $message = t('%url could not be added.', array('%url' => $embed_code));
            if (count($errors) > 1) {
              $message .= theme('item_list', array('items' => $errors));
            }
            else {
              $message .= ' ' . array_pop($errors);
            }
            form_set_error('embed_code', $message);
            return FALSE;
          }
        }
      }

      else {
        return FALSE;
      }
    }
  }
}


/**
 * Autocomplete callback for the tag search field
 */
function cocoon_media_autocomplete($string = '') {
  drupal_json_output(cocoon_media_get_matching_tags($string));
}
