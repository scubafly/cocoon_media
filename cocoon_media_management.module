<?php

/**
 * @file
 * The module file.
 */

function cocoon_media_management_menu() {
  $items['admin/config/media/cocoon_settings'] = array(
    'title' => 'Cocoon Media Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cocoon_media_management_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
     'file' => 'cocoon_media_management.admin.inc',
  );

  $items['file/add/cocoon_media_add'] = array(
    'title' => 'Cocoon Media',
    'description' => 'Browse Cocoon Media to add to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cocoon_media_management_external'),
    'access arguments' => array('access media browser'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'file_entity.pages.inc',
    'file path' => drupal_get_path('module', 'file_entity'),
  );

   return $items;
 }
 
function cocoon_media_management_get_setting($setting = '') {
  $cocoon_settings =variable_get('cocoon_media_settings', array());
  if(empty($setting)) {
    $return_value = $cocoon_settings;
  }
  else {
    $return_value = !empty($cocoon_settings[$setting]) ? $cocoon_settings[$setting] : '';
  }
  return $return_value;
}

function cocoon_media_management_create_cmm_controller() {
  $domain = cocoon_media_management_get_setting('cocoon_domain');
  $username = cocoon_media_management_get_setting('cocoon_username');
  $api_key = cocoon_media_management_get_setting('cocoon_api_key');
  return new CocoonController($domain, $username, $api_key);
}

/**
 * Implements hook_theme().
 */
function cocoon_media_management_theme($existing, $type, $theme, $path) {
  return array(
    'cocoon_media_list' => array(
      'variables' => array(
        'images' => NULL,
      ),
      'template' => 'cocoon-media-list',
      'path' => drupal_get_path('module', 'cocoon_media') . '/templates',
    ),
  );
}
  
/**
 * Implements hook_forms().
 */
function cocoon_media_management_forms($form_id, $args) {
  $forms = array();

  // Create a copy of the upload wizard form for internet media.
  if ($form_id == 'cocoon_media_management_external') {
    drupal_add_css(drupal_get_path('module', 'cocoon_media_management') . '/css/tablegrid-selet.css');
    $forms[$form_id] = array(
      'callback' => 'file_entity_add_upload',
    );
  }

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cocoon_media_management_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {
  $step = $form['#step'];
  if ($form_id == 'cocoon_media_management_external' && $step == 1) {
    unset($form['upload']);
    $domain = cocoon_media_management_get_setting('cocoon_domain');
    $username = cocoon_media_management_get_setting('cocoon_username');
    $api_key = cocoon_media_management_get_setting('cocoon_api_key');
    $cocoonController = cocoon_media_management_create_cmm_controller();
    $sets = $cocoonController->getSets();
    $radio_sets = [];
    $total_count = 0;
    foreach($sets as $set) {
      $radio_sets[$set['id']] = $set['title'] . ' (' . $set['file_count'] . ')';
      $total_count += $set['file_count'];
    }
    $radio_sets['all'] = 'All'. ' (' . $total_count . ')';

    $form['cocoon_media_browser'] = array(
      '#type' => 'fieldset',
      '#title' => t('Cocoon Media Management Browse'),
      '#collapsible' => FALSE,
      '#tree' => TRUE,
    );
    // CMM Label
    $form['cocoon_media_browser']['othertable'] = array(
      '#type' => 'tablegridselect',
    );
    // CMM Label
    $form['cocoon_media_browser']['description'] = array(
      '#markup' => t("Browse and add Cocoon Media to your library.") . '<br/>',
    );

  // Add the follwing form elements only if the module API is configured.
  if(!empty($domain) && !empty($username) && !empty($api_key)) {
      $form['cocoon_media_browser']['sets'] = array(
        '#type' => 'radios',
        '#title' => t('Select a set'),
        '#default_value' => 'all',
        '#options' => $radio_sets,
        '#ajax' => array(
          'callback' => 'ajaxCallbackGetFilesBySet',
          'wrapper' => 'images-table',
          'effect' => 'fade',
        ),
      );

      $set = 'all';
      if(!empty($form_state['values'])) {
        $values = $form_state['values'];
        $set = $values['cocoon_media_browser']['sets'];
      }
    
      $form['cocoon_media_browser']['images_table'] = buildTableSelect('images-table', $set);
    }
    else {
      // CMM Label
      $url = Link::createFromRoute('here','cocoon_media_management.admin_settings');
      $form['cocoon_media_browser']['api_not_configured'] = array(
        '#markup' => t('Please first add the configuration parameters here: <a href="@url">settings</a> page', array(
          '@url' => url('admin/config/media/cocoon_settings'),
        )),
      );
    }
    // $form['actions']['submit'] = [
    //   '#type' => 'submit',
    //   '#value' => t('Download Media'),
    //   '#button_type' => 'primary',
    // ];
  
    // Create an array to hold potential Internet media providers.
    $providers = array();

    // Determine if there are any visible providers.
    foreach (media_internet_get_providers() as $key => $provider) {
      if (empty($provider['hidden']) || $provider['hidden'] != TRUE) {
        $providers[] = check_plain($provider['title']);
      }
    }

    $form['#validators'] = array();

    if (!empty($options['types'])) {
      $form['#validators']['media_file_validate_types'] = array($options['types']);
    }

    // Add validation and submission handlers to the form and ensure that they
    // run first.
    array_unshift($form['#validate'], 'cocoon_media_add_validate');
    array_unshift($form['#submit'], 'media_internet_add_submit');
  }
  return $form;
}

function retrieveRemoteFile($url, $local_url = '', $to_temp = false) {
  // Check the cache and download the file if needed.
  $parsed_url = drupal_parse_url($url);
  $cocoon_dir = 'cocoon_media_files';
  $cocon_media_directory = 'public://'. $cocoon_dir;
  $is_dir_created = file_prepare_directory($cocon_media_directory, FILE_CREATE_DIRECTORY);
  if(empty($local_url)) {
    // $cocon_media_directory = $to_temp ? 'temporary://' : 'public://';
    $local_url = $cocon_media_directory . '/' . drupal_basename($parsed_url['path']);
  }
  // dpm([$url, $local_url]);\
  $retrieved_file = system_retrieve_file($url, $local_url, !$to_temp, FILE_EXISTS_REPLACE);
  return $retrieved_file;
}

function remoteThumbToLocal($image_info, $prefix, $is_temp = false) {
  $local_path = '';
  $filename = $prefix . $image_info['filename'] . '.' . $image_info['extension'];
  if(!empty($filename)) {
    $local_path = 'public://cocoon_media_files/' . $filename;
    if(!file_exists($local_path)) {
      $cocoonController = cocoon_media_management_create_cmm_controller();
      $thumb_info = $cocoonController->getThumbInfo($image_info['id']);
      if(!empty($thumb_info['web'])) {
        $local_file = retrieveRemoteFile($thumb_info['web'], $local_path, $is_temp);
      }
      else {
        $local_path = '';
      }
    }
  }
  return $local_path;
}

/**
 * {@inheritdoc}
 */
function submitForm(array &$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $selected_images = $values['cocoon_media_browser']['images_table'];
  $filenames = '';
  foreach($selected_images as $selected_image_id) {
    if($selected_image_id) {
      $cocoonController = cocoon_media_management_create_cmm_controller();
      $file_info = $cocoonController->getThumbInfo($selected_image_id);
      $url = $file_info['path'];
      // Check the cache and download the file if needed.
      $file = retrieveRemoteFile($url);
      $media_bundle = 'file';
      if ( $file_info['ext'] === 'jpg' ||
          $file_info['ext'] === 'jpeg' ||
          $file_info['ext'] === 'png' ||
          $file_info['ext'] === 'gif' ||
          $file_info['ext'] === 'tiff' ||
          $file_info['ext'] === 'bmp'
      ) {
        $media_bundle = 'image';
        $field_media_name = 'field_media_image';
        $field_media_arr = [
          'target_id' => $file->id(),
          'alt' => $file_info['name'],
          'title' => t($file_info['name']),
        ];
      }
      else if($file_info['ext'] === 'mp4'||
          $file_info['ext'] === 'avi'||
          $file_info['ext'] === 'flv'||
          $file_info['ext'] === 'mov') {
        $media_bundle = 'video';
        $field_media_name = 'field_media_video_file';
        $field_media_arr = [
          'target_id' => $file->id(),
          'alt' => $file_info['name'],
          'title' => t($file_info['name']),
        ];
      }
      else {
        $media_bundle = 'file';
        $field_media_name = 'field_media_file';
        $field_media_arr = [
          'target_id' => $file->id(),
          'title' => t($file_info['name']),
        ];

      }
      // Create media entity with saved file.
      $image_media = Media::create([
        'bundle' => $media_bundle,
        'uid' => \Drupal::currentUser()->id(),
        'langcode' => \Drupal::languageManager()->getDefaultLanguage()->getId(),
        'name' => $file_info['name'],
        $field_media_name => $field_media_arr,
      ]);
      $image_media->save();
      $filenames .= $file_info['name'] . ', ';
    }
  }
  // Redirecting to the media library page.
  $media_url = Url::fromRoute('entity.media.collection');
  $form_state->setRedirectUrl($media_url);
  $filenames = substr($filenames, 0, -2);
  // Adding custom message.
  drupal_set_message($this->t("The File(s) <i>$filenames</i> has been added to the media library."));
}

function buildOptionsElements($set_id) {
  $image_list = [];
  if(!empty($set_id)) {
    $cocoonController = cocoon_media_management_create_cmm_controller();
    if($set_id !== 'all')
    {
      $image_list = $cocoonController->getFilesBySet($set_id);
    }
    else {
      foreach($cocoonController->getSets() as $set) {
        $image_list = array_merge($image_list, $cocoonController->getFilesBySet($set['id']));
      }
    }
  }
  $options = [];
  foreach($image_list as $idx => $image_info) {
    $thumb_url = '/' . drupal_get_path('module', 'cocoon_media_management')
    . '/images/generic.png';
    $thumb = remoteThumbToLocal($image_info, 'thumb_', true);
    if(!empty($thumb)) {
      $thumb_url = file_create_url($thumb);
    }
    $elm = [
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
    ];
    $elm['id'] = [
      '#type' => 'hidden',
      '#value' => $image_info['id'],
    ];
    $elm['thumb'] = [
      '#markup' => "<div class='media-thumb' style='background-image:url($thumb_url)'></div>",
    ];
    $elm['title'] = [
      '#prefix' => '<label class="media-title">',
      '#suffix' => '</label>',
      '#markup' => $image_info['title'],
      '#attributes' => ['class' => 'media-title'],
    ];
    $elm['file_details'] = [
      '#markup' => '<p><b>Extension: </b>'
                  . $image_info['extension']
                  . '<br/><b>Size: </b>'
                  . round($image_info['size']/1024, 2)
                  . 'KB</p>',
    ];

    $options[$image_info['id']] = [
      'media_item' => drupal_render($elm),
    ];
  }
  return $options;
}

function buildTableSelect($class_id, $set_id) {
  $header = [
      'media_item' => t('Media File'),
  ];
  $options = buildOptionsElements($set_id);
  $table = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No media found'),
    '#multiple' => TRUE,
    '#attributes' => ['id' => $class_id],
    '#cache' => [
      'max-age' => 60 * 60 * 24, // Cached for one day.
    ],
    '#attached' => array(
      'library' => array('cocoon_media_management/tablegrid-selet')
    ),
  );
  return $table;
}

function ajaxCallbackGetFilesBySet(&$form, &$form_state) {
  return $form['cocoon_media_browser']['images_table'];
}

/**
 * Allow stream wrappers to have their chance at validation.
 *
 * Any module that implements hook_media_parse will have an
 * opportunity to validate this.
 *
 * @see media_parse_to_uri()
 */
function cocoon_media_add_validate($form, &$form_state) {
  $selected_images = $form_state['values']['cocoon_media_browser']['images_table'];
  $filenames = '';
  foreach($selected_images as $selected_image_id) {
    if($selected_image_id) {
      $cocoonController = cocoon_media_management_create_cmm_controller();
      $file_info = $cocoonController->getThumbInfo($selected_image_id);
      $url = $file_info['path'];
      $embed_code = $url;
      $form_state['values']['embed_code'] = $embed_code;

      // See @file_entity_add_upload_submit
      // Needed for skipping fields if is enabled and if Web tab is active.
      $form_state['triggering_element']['#id'] = 'edit-next';

      if (!empty($embed_code)) {
        try {
          $provider = media_internet_get_provider($embed_code);
          $provider->validate();
        }
        catch (MediaInternetNoHandlerException $e) {
          form_set_error('embed_code', $e->getMessage());
          return;
        }
        catch (MediaInternetValidationException $e) {
          form_set_error('embed_code', $e->getMessage());
          return;
        }

        $validators = $form['#validators'];
        $file = $provider->getFileObject();

        if ($validators) {
          try {
            $file = $provider->getFileObject();
          }
          catch (Exception $e) {
            form_set_error('embed_code', $e->getMessage());
            return;
          }

          $errors = file_validate($file, $validators);

          if (!empty($errors)) {
            $message = t('%url could not be added.', array('%url' => $embed_code));
            if (count($errors) > 1) {
              $message .= theme('item_list', array('items' => $errors));
            }
            else {
              $message .= ' ' . array_pop($errors);
            }
            form_set_error('embed_code', $message);
            return FALSE;
          }
        }
      }

      else {
        return FALSE;
      }
    }
  }
}
